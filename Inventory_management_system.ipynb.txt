{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkRw8XQDA3FaYETbI+KPuk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/archana-06/assignment-1/blob/main/Inventory_management_system.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-IB8Evs62RVI",
        "outputId": "f3a6b771-e3cb-41db-bec6-573f18813fc0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== Inventory Management System =====\n",
            "1. Check Stock\n",
            "2. Generate Reorder Alerts\n",
            "3. Generate Inventory Report\n",
            "4. Exit\n",
            "Enter your choice: 1\n",
            "Laptop (1), Category: Electronics, Price: $1200, Stock: 0\n",
            "Smartphone (2), Category: Electronics, Price: $800, Stock: 0\n",
            "\n",
            "===== Inventory Management System =====\n",
            "1. Check Stock\n",
            "2. Generate Reorder Alerts\n",
            "3. Generate Inventory Report\n",
            "4. Exit\n",
            "Enter your choice: 2\n",
            "Alert: Smartphone in Secondary Warehouse needs to be reordered!\n",
            "\n",
            "===== Inventory Management System =====\n",
            "1. Check Stock\n",
            "2. Generate Reorder Alerts\n",
            "3. Generate Inventory Report\n",
            "4. Exit\n",
            "Enter your choice: 3\n",
            "\n",
            "---- Inventory Report ----\n",
            "\n",
            "Warehouse: Main Warehouse\n",
            "Laptop: Stock - 50\n",
            "Smartphone: Stock - 100\n",
            "\n",
            "Warehouse: Secondary Warehouse\n",
            "Laptop: Stock - 20\n",
            "Smartphone: Stock - 0\n",
            "\n",
            "===== Inventory Management System =====\n",
            "1. Check Stock\n",
            "2. Generate Reorder Alerts\n",
            "3. Generate Inventory Report\n",
            "4. Exit\n",
            "Enter your choice: 4\n",
            "Exiting the program...\n"
          ]
        }
      ],
      "source": [
        "import datetime\n",
        "\n",
        "# Define Product and Warehouse classes\n",
        "class Product:\n",
        "    def __init__(self, id, name, category, cost, price, reorder_threshold):\n",
        "        self.id = id\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.cost = cost\n",
        "        self.price = price\n",
        "        self.reorder_threshold = reorder_threshold\n",
        "        self.stock = 0  # Current stock level\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"{self.name} ({self.id}), Category: {self.category}, Price: ${self.price}, Stock: {self.stock}\"\n",
        "\n",
        "class Warehouse:\n",
        "    def __init__(self, id, name, capacity):\n",
        "        self.id = id\n",
        "        self.name = name\n",
        "        self.capacity = capacity\n",
        "        self.inventory = {}  # Dictionary to store Product:quantity pairs\n",
        "\n",
        "    def add_product(self, product, quantity):\n",
        "        if product in self.inventory:\n",
        "            self.inventory[product] += quantity\n",
        "        else:\n",
        "            self.inventory[product] = quantity\n",
        "\n",
        "    def remove_product(self, product, quantity):\n",
        "        if product in self.inventory and self.inventory[product] >= quantity:\n",
        "            self.inventory[product] -= quantity\n",
        "        else:\n",
        "            print(f\"Not enough stock of {product.name} in {self.name}\")\n",
        "\n",
        "    def check_stock(self, product):\n",
        "        return self.inventory.get(product, 0)\n",
        "\n",
        "# Sample data initialization\n",
        "def initialize_data():\n",
        "    # Create products\n",
        "    product1 = Product(1, \"Laptop\", \"Electronics\", 800, 1200, 10)\n",
        "    product2 = Product(2, \"Smartphone\", \"Electronics\", 500, 800, 15)\n",
        "\n",
        "    # Create warehouses\n",
        "    warehouse1 = Warehouse(1, \"Main Warehouse\", 1000)\n",
        "    warehouse2 = Warehouse(2, \"Secondary Warehouse\", 500)\n",
        "\n",
        "    # Add initial stock to warehouses\n",
        "    warehouse1.add_product(product1, 50)\n",
        "    warehouse1.add_product(product2, 100)\n",
        "    warehouse2.add_product(product1, 20)\n",
        "\n",
        "    return [product1, product2], [warehouse1, warehouse2]\n",
        "\n",
        "# Inventory management functions\n",
        "def check_reorder(product, warehouse):\n",
        "    if warehouse.check_stock(product) <= product.reorder_threshold:\n",
        "        print(f\"Alert: {product.name} in {warehouse.name} needs to be reordered!\")\n",
        "\n",
        "def generate_report(products, warehouses):\n",
        "    print(\"\\n---- Inventory Report ----\")\n",
        "    for warehouse in warehouses:\n",
        "        print(f\"\\nWarehouse: {warehouse.name}\")\n",
        "        for product in products:\n",
        "            stock_level = warehouse.check_stock(product)\n",
        "            print(f\"{product.name}: Stock - {stock_level}\")\n",
        "\n",
        "def main():\n",
        "    products, warehouses = initialize_data()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n===== Inventory Management System =====\")\n",
        "        print(\"1. Check Stock\")\n",
        "        print(\"2. Generate Reorder Alerts\")\n",
        "        print(\"3. Generate Inventory Report\")\n",
        "        print(\"4. Exit\")\n",
        "\n",
        "        choice = input(\"Enter your choice: \")\n",
        "\n",
        "        if choice == '1':\n",
        "            for product in products:\n",
        "                print(product)\n",
        "\n",
        "        elif choice == '2':\n",
        "            for warehouse in warehouses:\n",
        "                for product in products:\n",
        "                    check_reorder(product, warehouse)\n",
        "\n",
        "        elif choice == '3':\n",
        "            generate_report(products, warehouses)\n",
        "\n",
        "        elif choice == '4':\n",
        "            print(\"Exiting the program...\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Invalid choice. Please enter a valid option.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    }
  ]
}